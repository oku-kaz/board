<?php

require_once 'Bd/Db/Record.php';
require_once 'Bd/Orm/Main/Table/Thread.php';
require_once 'Bd/Orm/Main/Const/Thread.php';

abstract class Bd_Orm_Main_Base_Thread extends Bd_Db_Record
{

    private static $_table_class = null;

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    public static function getTable()
    {
        if(!self::$_table_class)
        {
            self::$_table_class = new Bd_Orm_Main_Table_Thread();
            self::$_table_class->lock();
        }
        
        
        return self::$_table_class;
    }

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    protected function _getTable()
    {
        return self::getTable();
    }

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    public static function createTable()
    {
        return new Bd_Orm_Main_Table_Thread();
    }

    /**
     * @return Bd_Orm_Main_Form_Thread
     */
    public static function createForm(array $except = array(), Sdx_Db_Record $record = null)
    {
        return new Bd_Orm_Main_Form_Thread('', array(), $except, $record);
    }

    public function getId()
    {
        return $this->_get('id');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setId($value)
    {
        return $this->_set('id', $value);
    }

    public function getTitle()
    {
        return $this->_get('title');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setTitle($value)
    {
        return $this->_set('title', $value);
    }

    public function getCreatedAt()
    {
        return $this->_get('created_at');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setCreatedAt($value)
    {
        return $this->_set('created_at', $value);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Db_Record_List
     */
    public function getEntryList($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Entry', $this->_relations))
        {
            list($select, $db) = $this->_detectGetterArg($arg, 'getEntrySelect');
        	
            $table = Bd_Orm_Main_Entry::getTable();
            $select->add('thread_id', $this->getId(), 'entry');
            $records = $table->fetchAll($select);
            
        			foreach($records as $record)
        		    {
        				$record->bindThread($this);
        		    }
        
                    
            $this->_relations['Entry'] = $records;
        }
        
        if(isset($this->_tmp_relations['Entry']))
        {
        	$this->_relations['Entry']->mergeList(
        		$this->_tmp_relations['Entry']
        	);
        	
        	$this->_tmp_relations['Entry']->clear();
        }
                
        return $this->_relations['Entry'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function setEntryList($records)
    {
        $this->_relation_save = true;
        
        foreach($records as $key=>$record)
        {
        	$record->setThreadId($this->getId());
            $record->bindThread($this);
        }
        
        if(is_array($records))
        {
        	$records = new Bd_Db_Record_List($records);
        }
        
        $this->_exception_relations['Entry'] = $records;
        $this->_relations['Entry'] = $records;
        if(isset($this->_tmp_relations['Entry']))
        {
        	$this->_tmp_relations['Entry']->clear();
        }
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function bindEntry(Bd_Orm_Main_Entry $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        
        if(!array_key_exists('Entry', $this->_relations))
        {
        	$this->_relations['Entry'] = new Bd_Db_Record_List();
        }
        
        if($record && !($record instanceof Sdx_Null))
        {
        	$this->_relations['Entry']->mergeRecord($record);
        	
        		if($oposite)
        	{
        		$record->bindThread($this);
        	}
        
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Sdx_Db_Select
     */
    public function getEntrySelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_Entry::getTable()->getSelect($db);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function addEntry(Bd_Orm_Main_Entry $record)
    {
        $this->_relation_save = true;
        
        $record->bindThread($this);
        $record->setThreadId($this->getId());
        
        if(isset($this->_relations['Entry']))
        {
        	$this->_relations['Entry']->mergeRecord($record);
        }
        else
        {
        	if(!isset($this->_tmp_relations['Entry']))
        	{
        		$this->_tmp_relations['Entry'] = new Bd_Db_Record_List();
        	}
        	$this->_tmp_relations['Entry']->addRecord($record);
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function poolEntry(Bd_Orm_Main_Entry $record)
    {
        $this->_relation_save = true;
        
        if(!isset($this->_tmp_relations['Entry']))
        {
        	$this->_tmp_relations['Entry'] = new Bd_Db_Record_List();
        }
        
        $this->_tmp_relations['Entry']->addRecord($record);
        return $this;
    }


}

